package net.easyunion.biz.fpfs;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;

import net.easyunion.biz.BizMsgCodeConst;
import net.easyunion.biz.IBiz;
import net.easyunion.biz.fpfs.ctais.FpfsCtaisService;
import net.easyunion.biz.fpfs.jssq.FpfsJssqService;
import net.easyunion.common.model.ResponseVo;
import net.easyunion.common.util.DocTool;
import net.easyunion.common.webservice.Gt3WebServiceUtil;

public class BizGetLog implements IBiz{
	
private final static Logger logger = LoggerFactory.getLogger(BizGetLog.class);
	
	@Resource
	private FpfsCtaisService fpfsCtaisService;
	
	@Resource
	private FpfsJssqService fpfsJssqService;

	@Override
	public String doWrok(Document doc) {
		ResponseVo vo = new ResponseVo();
		String tran_id = "";
		String tran_seq = "";
		String tran_time = "";
		String channel = ""; 
		String logBack = "";
		String rzlogBack = "";
		try{
			
			tran_id = DocTool.getChildValue(doc, 0, "tran_id");
			tran_seq = DocTool.getChildValue(doc, 0, "tran_seq");
			tran_time = DocTool.getChildValue(doc, 0, "tran_time");
			channel = DocTool.getChildValue(doc, 0, "channel");
			vo.setTran_id(tran_id);
			vo.setTran_seq(tran_seq);
			vo.setTran_time(tran_time);
			vo.setChannel(channel);	
			
			String NSRSBH,YWLX_DM,FPZLDM,FPDM,FPQH,FPZH,SL,KPYZJHM,TSMID,TSMMAC,IP;
			TSMID = DocTool.getChildValue(doc, 0, "TSMID");
			TSMMAC = DocTool.getChildValue(doc, 0, "TSMMAC");
			IP = DocTool.getChildValue(doc, 0, "IP");
			NSRSBH = DocTool.getChildValue(doc, 0, "NSRSBH");
			YWLX_DM = DocTool.getChildValue(doc, 0, "YWLX_DM");
			FPZLDM = DocTool.getChildValue(doc, 0, "FPZLDM");
			FPDM = DocTool.getChildValue(doc, 0, "FPDM");
			FPQH = DocTool.getChildValue(doc, 0, "FPQH");
			FPZH = DocTool.getChildValue(doc, 0, "FPZH");
			SL = DocTool.getChildValue(doc, 0, "SL");
			KPYZJHM = DocTool.getChildValue(doc, 0, "KPYZJHM");
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String CZSJQ = sdf.format(new Date());
			String ID_NUMBER = "";
			String YW_DESCRIPTION = "发票发售日志";
			logger.error("service:开始拼接报文。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。");
			
			String strrz = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+
			               "<Tsm>"+
		                   "<HEAD>"+
		                   "<TSMID>"+TSMID+"</TSMID>"+
		                   "<TSMYWID>tsm.manage.sbrz</TSMYWID>"+
		                   "<TSMMAC>"+TSMMAC+"</TSMMAC>"+
		                   "<IP>"+IP+"</IP>"+
		                   "<TSMYWLSH>uuid</TSMYWLSH>"+
		                   "</HEAD>"+
		                   "<BODY><![CDATA["+
		                   "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+ 
							"<!--Sample XML file generated by XMLSpy v2013 (http://www.altova.com)-->"+ 
							"<tsmDoc xsi:type=\"zzfpfslist\" bbh=\"String\" xmlbh=\"String\" xmlmc=\"String\" xsi:schemaLocation=\"http://www.inspur.com/dataspec/ Tsm_Zzfpfsrz_Request.xsd\" xmlns=\"http://www.inspur.com/dataspec/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+ 
							    "<NSRSBH>"+NSRSBH+"</NSRSBH>"+
							    "<YWLX_DM>"+YWLX_DM+"</YWLX_DM>"+
							    "<CZSJQ>"+CZSJQ+"</CZSJQ>"+
							    "<RZ_ZZFPFS>"+
							    "<FPZLDM>"+FPZLDM+"</FPZLDM>"+
							    "<FPDM>"+FPDM+"</FPDM>"+
							    "<FPQH>"+FPQH+"</FPQH>"+
							    "<FPZH>"+FPZH+"</FPZH>"+
							    "<SL>"+SL+"</SL>"+
							    "</RZ_ZZFPFS>"+
							    "<YW_FLAG>1</YW_FLAG>"+
							    "<YW_DESCRIPTION>"+YW_DESCRIPTION+"</YW_DESCRIPTION>"+
							    "<ID_NUMBER>"+ID_NUMBER+"</ID_NUMBER>"+
							    "<WORKTIME_BZ>1</WORKTIME_BZ>"+
							    "<KPYZJHM>"+KPYZJHM+"</KPYZJHM></tsmDoc>"+
		                   "]]></BODY></Tsm>";
			logger.error("浪潮认证开始。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。");
			rzlogBack = Gt3WebServiceUtil.sendLc(strrz);
			logger.error("浪潮认证结束。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。");
			logger.error(rzlogBack);
			
			String str = 
            		"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+
  					"<Tsm xsi:type=\"Request\" bbh=\"String\" xmlbh=\"String\" xmlmc=\"String\" xsi:schemaLocation=\"http://www.inspur.com/dataspec/ Tsm_Zzfpfsrz_Request.xsd\" xmlns=\"http://www.inspur.com/dataspec/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+
  					"<HEAD>"+
  					   "<TSMID>"+TSMID+"</TSMID>"+	
  					   "<TSMYWID>tsm.zdywrz.zzbszdglxt.tsmywrzgl.zzfpfsrzfw</TSMYWID>"+
  					   "<TSMMAC>"+TSMMAC+"</TSMMAC>"+
  					   "<IP>"+IP+"</IP>"+
  					   "<TSMYWLSH></TSMYWLSH>"+
  					"</HEAD>"+
  					"<BODY><![CDATA["+ 
					    "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"+ 
						"<tsmDoc xsi:type=\"zzfpfslist\" bbh=\"String\" xmlbh=\"String\" xmlmc=\"String\" xsi:schemaLocation=\"http://www.inspur.com/dataspec/ Tsm_Zzfpfsrz_Request.xsd\" xmlns=\"http://www.inspur.com/dataspec/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+ 
						    "<NSRSBH>"+NSRSBH+"</NSRSBH>"+
						    "<YWLX_DM>"+YWLX_DM+"</YWLX_DM>"+
						    "<CZSJQ>"+CZSJQ+"</CZSJQ>"+
						    "<RZ_ZZFPFS>"+
						    "<FPZLDM>"+FPZLDM+"</FPZLDM>"+
						    "<FPDM>"+FPDM+"</FPDM>"+
						    "<FPQH>"+FPQH+"</FPQH>"+
						    "<FPZH>"+FPZH+"</FPZH>"+
						    "<SL>"+SL+"</SL>"+
						    "</RZ_ZZFPFS>"+
						    "<YW_FLAG>1</YW_FLAG>"+
						    "<YW_DESCRIPTION>"+YW_DESCRIPTION+"</YW_DESCRIPTION>"+
						    "<ID_NUMBER>"+ID_NUMBER+"</ID_NUMBER>"+
						    "<WORKTIME_BZ>1</WORKTIME_BZ>"+
						    "<KPYZJHM>"+KPYZJHM+"</KPYZJHM></tsmDoc>"+
  					 "]]></BODY></Tsm>";
			logger.error("service:报文传递给浪潮开始。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。");
			logger.error(str);
			logBack = Gt3WebServiceUtil.sendLc(str);
			logger.error("service:报文传递给浪潮结束。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。");
			logger.error(logBack);
			
			String code = DocTool.getChildValue(doc, 0, "RTN_CODE");
			String message = DocTool.getChildValue(doc, 0, "MESSAGE");
			if("1".equals(code)){
				vo.setResCode(BizMsgCodeConst.ResCode.success.toString());
				vo.setResMsg("成功");
			}else{
				vo.setResCode(BizMsgCodeConst.ResCode.innerInterfaceErr.toString());
				vo.setResMsg("失败");
			}
			
			
		} catch (Exception e) {
			logger.error("ERR["+tran_id+"]============解析报文xml或查询发生错误！" + e.toString());
			vo.setResCode(BizMsgCodeConst.ResCode.parseXmlErr.toString());
			vo.setResMsg("解析报文xml或查询发生错误！");
			e.printStackTrace();
		} 
		return vo.getDoc();
	}
}
